import React from 'react';
import type { CSSProperties } from 'react';
import type { StreamTypes, PlaybackTypes, CmcdTypes } from '@mux/playback-core';
import { MediaError } from '@groundbreak/groundbreak-player';
import type MuxPlayerElement from '@groundbreak/groundbreak-player';
import type { Tokens, MuxPlayerElementEventMap } from '@groundbreak/groundbreak-player';
export { MediaError };
type ValueOf<T> = T[keyof T];
interface GenericEventListener<T extends Event = CustomEvent> {
    (evt: T): void;
}
export type MuxPlayerRefAttributes = MuxPlayerElement;
type VideoApiAttributes = {
    currentTime: number;
    volume: number;
    paused: boolean;
    src: string | null;
    poster: string;
    playbackRate: number;
    playsInline: boolean;
    preload: string;
    crossOrigin: string;
    autoPlay: boolean | string;
    loop: boolean;
    muted: boolean;
    style: CSSProperties;
};
type MuxMediaPropTypes = {
    audio: boolean;
    envKey: string;
    debug: boolean;
    disableCookies: boolean;
    metadata: {
        [k: string]: any;
    };
    beaconCollectionDomain: string;
    customDomain: string;
    playbackId: string;
    preferPlayback: ValueOf<PlaybackTypes> | undefined;
    streamType: ValueOf<StreamTypes> | 'll-live' | 'live:dvr' | 'll-live:dvr';
    defaultStreamType: ValueOf<StreamTypes>;
    targetLiveWindow: number;
    startTime: number;
    storyboardSrc: string;
    preferCmcd: ValueOf<CmcdTypes> | undefined;
    children: never[];
};
export type WidgetAttributes = {
    type: 'LINK' | 'CALENDLY' | 'TEXT' | 'SHAPE';
    href?: string;
    label?: string;
    spawnTime?: number;
    duration?: number;
    style?: CSSProperties;
};
type GroundBreakWidgetTypes = {
    widgets?: string;
    aspectRatio?: number;
};
export type MuxPlayerProps = {
    className?: string;
    hotkeys?: string;
    nohotkeys?: boolean;
    defaultHiddenCaptions?: boolean;
    playerSoftwareVersion?: string;
    playerSoftwareName?: string;
    forwardSeekOffset?: number;
    backwardSeekOffset?: number;
    maxResolution?: string;
    metadataVideoId?: string;
    metadataVideoTitle?: string;
    metadataViewerUserId?: string;
    primaryColor?: string;
    secondaryColor?: string;
    placeholder?: string;
    playbackRates?: number[];
    defaultShowRemainingTime?: boolean;
    noVolumePref?: boolean;
    thumbnailTime?: number;
    title?: string;
    tokens?: Tokens;
    theme?: string;
    themeProps?: {
        [k: string]: any;
    };
    onAbort?: GenericEventListener<MuxPlayerElementEventMap['abort']>;
    onCanPlay?: GenericEventListener<MuxPlayerElementEventMap['canplay']>;
    onCanPlayThrough?: GenericEventListener<MuxPlayerElementEventMap['canplaythrough']>;
    onEmptied?: GenericEventListener<MuxPlayerElementEventMap['emptied']>;
    onLoadStart?: GenericEventListener<MuxPlayerElementEventMap['loadstart']>;
    onLoadedData?: GenericEventListener<MuxPlayerElementEventMap['loadeddata']>;
    onLoadedMetadata?: GenericEventListener<MuxPlayerElementEventMap['loadedmetadata']>;
    onProgress?: GenericEventListener<MuxPlayerElementEventMap['progress']>;
    onDurationChange?: GenericEventListener<MuxPlayerElementEventMap['durationchange']>;
    onVolumeChange?: GenericEventListener<MuxPlayerElementEventMap['volumechange']>;
    onRateChange?: GenericEventListener<MuxPlayerElementEventMap['ratechange']>;
    onResize?: GenericEventListener<MuxPlayerElementEventMap['resize']>;
    onWaiting?: GenericEventListener<MuxPlayerElementEventMap['waiting']>;
    onPlay?: GenericEventListener<MuxPlayerElementEventMap['play']>;
    onPlaying?: GenericEventListener<MuxPlayerElementEventMap['playing']>;
    onTimeUpdate?: GenericEventListener<MuxPlayerElementEventMap['timeupdate']>;
    onPause?: GenericEventListener<MuxPlayerElementEventMap['pause']>;
    onSeeking?: GenericEventListener<MuxPlayerElementEventMap['seeking']>;
    onSeeked?: GenericEventListener<MuxPlayerElementEventMap['seeked']>;
    onStalled?: GenericEventListener<MuxPlayerElementEventMap['stalled']>;
    onSuspend?: GenericEventListener<MuxPlayerElementEventMap['suspend']>;
    onEnded?: GenericEventListener<MuxPlayerElementEventMap['ended']>;
    onError?: GenericEventListener<MuxPlayerElementEventMap['error']>;
    onCuePointChange?: GenericEventListener<MuxPlayerElementEventMap['cuepointchange']>;
    onCuePointsChange?: GenericEventListener<MuxPlayerElementEventMap['cuepointschange']>;
} & Partial<MuxMediaPropTypes> & Partial<VideoApiAttributes> & Partial<GroundBreakWidgetTypes>;
declare const MuxPlayer: React.ForwardRefExoticComponent<Omit<MuxPlayerProps, "playerSoftwareName" | "playerSoftwareVersion"> & React.RefAttributes<MuxPlayerElement>>;
export default MuxPlayer;
