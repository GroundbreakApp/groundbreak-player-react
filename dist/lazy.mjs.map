{
  "version": 3,
  "sources": ["../src/lazy.tsx", "../src/ConditionalSuspense.tsx", "../src/useIsBrowser.ts", "../src/useIsIntersecting.ts"],
  "sourcesContent": ["import React, { useEffect, useState } from 'react';\nimport type { DetailedHTMLProps, HTMLAttributes } from 'react';\nimport type { ValueOf } from '@mux/playback-core';\n\nimport ConditionalSuspense from './ConditionalSuspense';\nimport useIsBrowser from './useIsBrowser';\nimport useIsIntersecting from './useIsIntersecting';\n\nimport type { MuxPlayerProps, MuxPlayerRefAttributes } from './index';\n\ninterface MuxPlayerElement extends DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement> {\n  nohotkeys?: boolean | undefined;\n}\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'mux-player': MuxPlayerElement;\n    }\n  }\n}\n\nconst MuxPlayerIndex = React.lazy(() => import('./index'));\n\ninterface FallbackProps extends MuxPlayerProps {\n  onIntersection?: () => void;\n}\nconst Fallback = (props: FallbackProps) => {\n  const { style, className, onIntersection, placeholder } = props;\n\n  const intersectionRef = React.useRef<HTMLElement>(null);\n  const isIntersecting = useIsIntersecting(intersectionRef);\n\n  useEffect(() => {\n    if (isIntersecting && onIntersection) {\n      onIntersection();\n    }\n  }, [isIntersecting, onIntersection]);\n\n  return (\n    /* \n    Why do we have a mux-player element before the mux-player bundle is even loaded?\n    Before the bundle is loaded, this mux-player element just acts like a div.\n    However, by calling this placeholder \"mux-player\",\n    it now gets the same CSS applied to it that the eventual \"real\" mux-player element will. \n    */\n    <>\n      <mux-player\n        ref={intersectionRef}\n        data-mux-player-react-lazy-placeholder\n        placeholder={placeholder}\n        style={\n          {\n            '--mux-player-react-lazy-placeholder': placeholder ? `url(${placeholder});` : '',\n            ...style,\n          } as React.CSSProperties\n        }\n        className={className || ''}\n        // since there's a possibility that the bundle loads before Suspense clears this placeholder,\n        // we need to make sure that the placeholder isn't interactive and its player chrome in doesn't get rendered\n        nohotkeys\n        aria-hidden\n        tabIndex={-1}\n      >\n        <div data-mux-player-react-lazy-placeholder-overlay />\n      </mux-player>\n      <style>{\n        /* css */ `\n        mux-player[data-mux-player-react-lazy-placeholder] {\n          aspect-ratio: 16/9;\n          display: block;\n          background-color: var(--media-background-color, #000);\n          width: 100%;\n          position: relative;\n          background-image: var(--mux-player-react-lazy-placeholder);\n          background-repeat: no-repeat;\n          background-size: var(--media-object-fit, contain);\n          background-position: var(--media-object-position, 50% 50%);\n          --controls: none;\n          --controls-backdrop-color: rgba(0, 0, 0, 0.6);\n        }\n        mux-player [data-mux-player-react-lazy-placeholder-overlay] {\n          position: absolute;\n          inset: 0;\n          background-color: var(--controls-backdrop-color);\n        }\n      `\n      }</style>\n    </>\n  );\n};\n\ntype LoadingType = {\n  PAGE: 'page';\n  VIEWPORT: 'viewport';\n};\n\nconst LoadingType: LoadingType = {\n  PAGE: 'page',\n  VIEWPORT: 'viewport',\n};\n\ninterface MuxPlayerLazyProps extends MuxPlayerProps {\n  loading?: ValueOf<LoadingType>;\n}\nconst MuxPlayer = React.forwardRef<MuxPlayerRefAttributes, MuxPlayerLazyProps>((props, ref) => {\n  const { loading = LoadingType.VIEWPORT, ...playerProps } = props;\n\n  // We load mux player once two conditions are met:\n  // 1. We're in a browser (react.lazy doesn't work on the server in react 17)\n  const isBrowser = useIsBrowser();\n  // 2. The player has entered the viewport, according to the fallback (if enabled).\n  const [isIntersecting, setIsIntersecting] = useState(() => (loading === LoadingType.VIEWPORT ? false : true));\n\n  return (\n    <ConditionalSuspense\n      condition={isBrowser && isIntersecting}\n      fallback={\n        <Fallback\n          style={playerProps.style}\n          className={playerProps.className}\n          placeholder={playerProps.placeholder}\n          onIntersection={() => setIsIntersecting(true)}\n        />\n      }\n    >\n      <MuxPlayerIndex {...playerProps} ref={ref} />\n    </ConditionalSuspense>\n  );\n});\n\nexport default MuxPlayer;\n", "import React, { Suspense } from 'react';\n\ntype Props = {\n  fallback: React.ReactChild | React.ReactFragment | React.ReactPortal | null;\n  condition: boolean;\n  children: React.ReactNode;\n};\nconst ConditionalSuspense = ({ condition, fallback, children, ...rest }: Props) => {\n  return condition ? (\n    <Suspense fallback={fallback} {...rest}>\n      {children}\n    </Suspense>\n  ) : (\n    <>{fallback}</>\n  );\n};\n\nexport default ConditionalSuspense;\n", "import { useState, useEffect } from 'react';\n\nconst useIsBrowser = () => {\n  const [isBrowser, setIsBrowser] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      setIsBrowser(true);\n    }\n  }, []);\n\n  return isBrowser;\n};\nexport default useIsBrowser;\n", "import { useState, useEffect } from 'react';\n\nconst useIsIntersecting = (ref: React.RefObject<HTMLElement>, options?: IntersectionObserverInit) => {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    if (typeof IntersectionObserver === 'function') {\n      const observer = new IntersectionObserver(([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n      }, options);\n\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [ref, options]);\n\n  return isIntersecting;\n};\n\nexport default useIsIntersecting;\n"],
  "mappings": "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",
  "names": ["React", "useEffect", "useState", "useState", "useEffect", "React", "useEffect", "useState"]
}
